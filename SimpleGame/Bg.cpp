#include "Bg.h"
#include "DxLib.h"
#include "Game.h"

namespace
{
	//チップ一つの大きさ
	constexpr int kChipWidth = 32;
	constexpr int kChipHeight = 32;
	//チップを何個置くかの情報
	constexpr int kChipNumX = Game::kScreenWidth / kChipWidth;	//40
	constexpr int kChipNumY = Game::kScreenHeight / kChipHeight + 1;	//23

	//チップの配置情報を2次元配列で準備する
	constexpr int kChipSetting[kChipNumY][kChipNumX] =
	{
		{    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  4,  4,  4,  4,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9 },
		{    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  4,  4,  4,  4,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9 },
		{    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  4,  4,  4,  4,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9 },
		{    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  4,  4,  4,  4,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9 },
		{    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  4,  4,  4,  4,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9 },
		{    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  4,  4,  4,  4,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9 },
		{    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  4,  4,  4,  4, 86,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9, 86,  9,  9,  9,  9 },
		{    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  4,  4,  4,  4, 94,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9, 94,  9,  9,  9,  9 },
		{    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  4,  4,  4,  4,102,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,102,  9,  9,  9,  9 },
		{    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,344,345,346,  4,  4,  4,  4,110,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,110,  9,  9,  9,  9 },
		{    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,352,353,354,  4,  4,  4,  4,118,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,118,  9,  9,  9,  9 },
		{    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,360,361,362,  4,  4,  4,  4,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9 },
		{    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  4,  4,  4,  4,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9 },
		{    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  4,  4,  4,  4,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9 },
		{    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  4,  4,  4,  4,  9,  9,347,348,349,350,351,  9,  9,  9,  9,  9,  9,  9,  9,  9 },
		{    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  4,  4,  4,  4,  9,  9,355,356,357,358,359,  9,  9,  9,  9,  9,  9,  9,  9,  9 },
		{    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  4,  4,  4,  4,  9,  9,363,364,365,366,367,  9,  9,  9,  9,  9,  9,  9,  9,  9 },
		{    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  4,  4,  4,  4,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9 },
		{    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  4,  4,  4,  4,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9 },
		{    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  4,  4,  4,  4,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9 },
		{    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  4,  4,  4,  4,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9 },
		{    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  4,  4,  4,  4,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9 },
		{    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  4,  4,  4,  4,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9 }
	};
	

}

Bg::Bg():
	m_handle(-1),
	m_graphChipNumX(0)
{
}

Bg::~Bg()
{
}

void Bg::Init(int handle)
{
	m_handle = handle;
	
	//グラフィックが横方向にチップを何個含むか、を計算する

	//計算するためにグラフィックのサイズを取得する
	int graphWidth = 0;
	int graphHeight = 0;
	GetGraphSize(m_handle,&graphWidth,&graphHeight);
	//printfDx("size(%d,%d)\n", graphWidth, graphHeight);
	//グラフィックの横幅/チップ1つの横幅 でチップの数を計算する
	m_graphChipNumX = graphWidth / kChipWidth;
}
void Bg::End()
{

}
void Bg::Update()
{

}
void Bg::Draw()
{
	for (int y = 0; y < kChipNumY; y++)
	{
		for (int x = 0; x < kChipNumX; x++)
		{
			int chipNo = kChipSetting[y][x];

			//チップの表示位置
			int dstX = x * kChipWidth;
			int dstY = y * kChipHeight;
			int chipX = 1;
			int chipY = 1;
			DrawRectGraph(dstX, dstY,
				chipX * kChipWidth, chipY * kChipHeight,
				kChipWidth, kChipHeight,
				m_handle, true, false);
		}
	}

	for (int y = 0; y < kChipNumY; y++)
	{
		for (int x = 0; x < kChipNumX; x++)
		{
			int chipNo = kChipSetting[y][x];

			//チップの表示位置
			int dstX = x * kChipWidth;
			int dstY = y * kChipHeight;
			//どの位置のチップを切り取るか
			//通し番号で管理されているチップを
			//横から何個目、上から何個目、という情報に変換する必要がある

			int chipX = chipNo % m_graphChipNumX;
			int chipY = chipNo / m_graphChipNumX;
			DrawRectGraph(dstX, dstY,
				chipX * kChipWidth, chipY * kChipHeight,
				kChipWidth, kChipHeight,
				m_handle, true, false);
		}
	}
}